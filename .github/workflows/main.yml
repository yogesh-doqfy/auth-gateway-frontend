name: Deploy Angular from Artifact Registry to Google VM

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Enter the version to deploy (leave empty for latest)"
        required: false
  push:
    branches:
      - server

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: üßæ Checkout Repository
        uses: actions/checkout@v4

      - name: üîê Authenticate with Google Cloud (Workload Identity Federation)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: "projects/297178011153/locations/global/workloadIdentityPools/github-pool/providers/github-provider"
          service_account: "doqfy-storage@crucial-context-454812-v3.iam.gserviceaccount.com"
          project_id: "crucial-context-454812-v3"

      - name: ‚öôÔ∏è Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: crucial-context-454812-v3

      - name: üìå Select Deployment Version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            SELECTED_VERSION="${{ github.event.inputs.version }}"
          else
            SELECTED_VERSION=$(gcloud artifacts versions list \
              --repository=auth-gateway-frontend-cicd \
              --location=us-west2 \
              --package=auth-frontend \
              --sort-by=~CREATE_TIME \
              --limit=1 \
              --format='value(name)')
          fi
          echo "SELECTED_VERSION=$SELECTED_VERSION" >> $GITHUB_ENV

      - name: üìÅ Create Download Directory
        run: mkdir -p downloaded_package

      - name: üîé Get Package File from Artifact Registry
        run: |
          SELECTED_FILE=$(gcloud artifacts files list \
            --repository=auth-gateway-frontend-cicd \
            --location=us-west2 \
            --package=auth-frontend \
            --version=$SELECTED_VERSION \
            --sort-by=~CREATE_TIME \
            --limit=1 \
            --format='value(name)')
          echo "SELECTED_FILE=$SELECTED_FILE" >> $GITHUB_ENV

      - name: üì• Download Package File
        run: |
          gcloud artifacts files download "$SELECTED_FILE" \
            --repository=auth-gateway-frontend-cicd \
            --location=us-west2 \
            --destination=downloaded_package/ \
            --project=crucial-context-454812-v3

      - name: üè∑Ô∏è Rename Downloaded Package
        run: |
          FILE_NAME=$(basename "$SELECTED_FILE")
          ACTUAL_FILE=$(ls downloaded_package/ | grep "${FILE_NAME}" || true)
          if [ -z "$ACTUAL_FILE" ]; then
            echo "‚ùå Error: Downloaded file not found!"
            exit 1
          fi
          mv "downloaded_package/$ACTUAL_FILE" "downloaded_package/frontend-${{ env.SELECTED_VERSION }}.tgz"

      - name: üì¶ Extract .tgz Package
        run: |
          tar -xzf downloaded_package/frontend-${{ env.SELECTED_VERSION }}.tgz -C downloaded_package/
          ls -la downloaded_package/

      - name: üîç Locate dist/auth-portal Folder
        run: |
          DIST_PATH=$(find downloaded_package -type d -name "auth-portal" -print -quit)
          if [ -z "$DIST_PATH" ]; then
            echo "‚ùå Error: 'auth-portal' folder not found!"
            exit 1
          fi
          echo "DIST_PATH=$DIST_PATH" >> $GITHUB_ENV

      - name: üöÄ Upload to Google VM via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "${{ env.DIST_PATH }}"
          target: "/tmp/frontend-${{ env.SELECTED_VERSION }}"

      - name: üîß Deploy to /var/www/html on VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "üîÅ Replacing current frontend with version: ${{ env.SELECTED_VERSION }}"
            sudo rm -rf /var/www/html/*
            sudo cp -r /tmp/frontend-${{ env.SELECTED_VERSION }}/* /var/www/html/
            sudo rm -rf /tmp/frontend-${{ env.SELECTED_VERSION }}
            sudo systemctl restart nginx || echo "Nginx not running or not needed."
            echo "‚úÖ Frontend version ${{ env.SELECTED_VERSION }} deployed successfully."
