name: CI/CD Pipeline

on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging

jobs:
  build-push-artifactory:
    name: Build and Push to Artifact Registry
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: crucial-context-454812-v3
      REPO_NAME: auth-gateway-frontend-cicd
      REGION: us-west2
      ARTIFACT_REGISTRY: us-west2-npm.pkg.dev/crucial-context-454812-v3/auth-gateway-frontend-cicd

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install Dependencies
        run: npm install --force

      - name: Install Angular CLI
        run: npm install -g @angular/cli

      - name: Removing the dist file
        run: rm -rf dist/

      - name: Build Angular Project
        run: npx ng build --configuration=production

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure npm for Artifact Registry
        run: |
          npm set @crucial-context-454812-v3:registry=https://${{ env.ARTIFACT_REGISTRY }}/
          npm set //${{ env.ARTIFACT_REGISTRY }}/:_authToken="$(gcloud auth print-access-token)"

      - name: Temporarily Disable Private Flag
        run: jq 'del(.private)' package.json > temp.json && mv temp.json package.json

      - name: Clear npm Cache
        run: npm cache clean --force

      - name: Fetch Latest Version and Increment (Improved)
        run: |
          PACKAGE_NAME=$(jq -r .name package.json)
          echo "Fetching versions for $PACKAGE_NAME from registry..."
          
          PUBLISHED_VERSIONS=$(npm view $PACKAGE_NAME versions --json --registry=https://${{ env.ARTIFACT_REGISTRY }}/ 2>/dev/null || echo "[]")

          echo "Published versions from registry: $PUBLISHED_VERSIONS"
          
          if [[ "$PUBLISHED_VERSIONS" == "[]" ]]; then
            LATEST_VERSION="0.0.0"
          else
            LATEST_VERSION=$(echo "$PUBLISHED_VERSIONS" | jq -r '. | map(select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))) | sort_by(split(".") | map(tonumber)) | .[-1]')
          fi

          echo "Latest detected version: $LATEST_VERSION"

          if [[ "$LATEST_VERSION" == "null" || -z "$LATEST_VERSION" ]]; then
            NEW_VERSION="0.0.1"
          else
            NEW_VERSION=$(echo "$LATEST_VERSION" | awk -F. '{print $1"."$2"."$3+1}')
          fi

          echo "New version to be published: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          
          npm version $NEW_VERSION --no-git-tag-version
          echo "Updated package.json version to $NEW_VERSION"

      - name: Verify If Version Exists
        run: |
          PACKAGE_NAME=$(jq -r .name package.json)
          PUBLISHED_VERSIONS=$(npm view $PACKAGE_NAME versions --json --registry=https://${{ env.ARTIFACT_REGISTRY }}/ 2>/dev/null || echo "[]")

          echo "Checking if version $NEW_VERSION already exists in registry..."
          
          if echo "$PUBLISHED_VERSIONS" | jq -r '.[]' | grep -xq "$NEW_VERSION"; then
            echo "Version $NEW_VERSION already exists. Incrementing version..."
            PATCH=$(echo "$NEW_VERSION" | awk -F. '{print $3+1}')
            NEW_VERSION=$(echo "$NEW_VERSION" | awk -F. '{print $1"."$2"."PATCH}')
            npm version $NEW_VERSION --no-git-tag-version
            echo "Updated package.json version to $NEW_VERSION"
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          fi

      - name: Publish Latest Version
        run: |
          echo "Publishing version: $NEW_VERSION"
          npm publish --registry=https://${{ env.ARTIFACT_REGISTRY }}/ --tag latest
