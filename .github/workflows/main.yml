name: CI/CD Pipeline

on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging

permissions:
  contents: read
  id-token: write  # Required for Workload Identity Federation

jobs:
  build-push-artifactory:
    name: Build and Push to Artifact Registry
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: crucial-context-454812-v3
      REPO_NAME: auth-final
      REGION: us-west2
      ARTIFACT_REGISTRY: us-west2-npm.pkg.dev/crucial-context-454812-v3/auth-final

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install Dependencies
        run: npm install --force

      - name: Install Angular CLI
        run: npm install -g @angular/cli

      - name: Remove Existing Build Directory
        run: rm -rf dist/

      - name: Build Angular Project
        run: npx ng build --configuration=production

      - name: Authenticate with Google Cloud using Workload Identity Federation
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: "projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/providers/PROVIDER_ID"
          service_account: "SERVICE_ACCOUNT_EMAIL"

      - name: Configure npm for Artifact Registry
        run: |
          npm set @${{ env.PROJECT_ID }}:registry=https://${{ env.ARTIFACT_REGISTRY }}/
          npm set //${{ env.ARTIFACT_REGISTRY }}/:_authToken="$(gcloud auth print-access-token)"

      - name: Temporarily Disable Private Flag in `package.json`
        run: jq 'del(.private)' package.json > temp.json && mv temp.json package.json

      - name: Clear npm Cache
        run: npm cache clean --force

      - name: Fetch Latest Version and Increment
        run: |
          PACKAGE_NAME=$(jq -r .name package.json)
          echo "Fetching versions for $PACKAGE_NAME from registry..."

          # Get existing versions or fallback to empty array
          PUBLISHED_VERSIONS=$(npm view "$PACKAGE_NAME" versions --json --registry=https://${{ env.ARTIFACT_REGISTRY }}/ 2>/dev/null || echo "[]")

          # Handle errors from npm view
          if [[ "$PUBLISHED_VERSIONS" =~ "E404" || "$PUBLISHED_VERSIONS" == "[]" || -z "$PUBLISHED_VERSIONS" ]]; then
            echo "No existing versions found. Starting at 0.0.1"
            NEW_VERSION="0.0.1"
          else
            LATEST_VERSION=$(echo "$PUBLISHED_VERSIONS" | jq -r 'map(select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))) | map(split(".") | map(tonumber)) | sort | last | [.[] | tostring] | join(".")')

            if [[ -z "$LATEST_VERSION" || "$LATEST_VERSION" == "null" ]]; then
              echo "No valid versions found. Starting at 0.0.1"
              NEW_VERSION="0.0.1"
            else
              IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
            fi
          fi

          echo "New version to be published: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          
          npm version "$NEW_VERSION" --no-git-tag-version
          echo "Updated package.json version to $NEW_VERSION"

      - name: Publish Latest Version to Artifact Registry
        run: |
          echo "Publishing version: $NEW_VERSION"
          npm publish --registry=https://${{ env.ARTIFACT_REGISTRY }}/ --tag latest
