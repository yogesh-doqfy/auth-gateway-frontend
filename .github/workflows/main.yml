name: CI/CD Pipeline

on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging

jobs:
  build-push-artifactory:
    name: Build and Push to Artifact Registry
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: crucial-context-454812-v3
      REPO_NAME: auth-gateway-frontend-cicd
      REGION: us-west2
      ARTIFACT_REGISTRY: us-west2-npm.pkg.dev/crucial-context-454812-v3/auth-gateway-frontend-cicd

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install Dependencies
        run: npm install --force

      - name: Install Angular CLI
        run: npm install -g @angular/cli

      - name: Build Angular Project
        run: npx ng build --configuration=production

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure npm for Artifact Registry
        run: |
          npm set registry=https://${{ env.ARTIFACT_REGISTRY }}/
          npm set //${{ env.ARTIFACT_REGISTRY }}/:_authToken="$(gcloud auth print-access-token)"
          echo "NPM registry configured successfully."

      - name: Temporarily Disable Private Flag
        run: jq 'del(.private)' package.json > temp.json && mv temp.json package.json

      - name: Clear npm Cache
        run: npm cache clean --force

      - name: Increment Version
        run: |
          PACKAGE_NAME=$(jq -r .name package.json)

          # Fetch the latest published version or default to "0.0.0"
          PUBLISHED_VERSION=$(npm show $PACKAGE_NAME version --registry=https://${{ env.ARTIFACT_REGISTRY }}/ 2>/dev/null || echo "0.0.0")

          # If no version exists, start from 0.0.1
          if [[ "$PUBLISHED_VERSION" == "0.0.0" ]]; then
            NEW_VERSION="0.0.1"
          else
            NEW_VERSION=$(echo $PUBLISHED_VERSION | awk -F. '{print $1"."$2"."$3+1}')
          fi

          # Update package.json with new version
          jq --arg new_version "$NEW_VERSION" '.version=$new_version' package.json > temp.json && mv temp.json package.json
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "Updated package.json version to $NEW_VERSION"

      - name: Publish Latest Version
        run: npm publish --registry=https://${{ env.ARTIFACT_REGISTRY }}/ --tag latest

      - name: Publish Versioned Package
        run: npm publish --registry=https://${{ env.ARTIFACT_REGISTRY }}/ --tag version-${{ env.NEW_VERSION }}

      - name: Deploy (Optional)
        if: success()
        run: echo "Deploy steps here"
